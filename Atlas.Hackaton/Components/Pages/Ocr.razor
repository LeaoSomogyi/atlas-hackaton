@page "/ocr"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Amazon
@using Amazon.Textract;
@using Amazon.Textract.Model

<PageTitle>OCR</PageTitle>

<div class="row">
    <div class="col-6">
        <InputFile OnChange="@LoadFiles" />
    </div>
    <div class="col-6">
        <pre>@DocAsJson</pre>
    </div>
</div>

@code {
    private string DocAsJson { get; set; } = default!;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream(stream);
            var client = new AmazonTextractClient();
            var request = new DetectDocumentTextRequest
                {
                    Document = new Document
                    {
                        Bytes = memoryStream.ToArray()
                    }
                };

            try
            {
                var response = await textractClient.DetectDocumentTextAsync(request);

            }
            catch (Exception ex)
            {
                DocAsJson = ex.Message;
            }
        }
    }

    private static async Task StartDetectSampleAsync(IBrowserFile file)
    {
        // Set to a bucket that you actually own
        var s3Bucket = "textract-console-us-west-1-4ec677ee-35ad-4cad-9005-c25edd41f1c8";

        using (var textractClient = new AmazonTextractClient(RegionEndpoint.USWest1))
        using (var s3Client = new AmazonS3Client(RegionEndpoint.USWest1))
        {
            Console.WriteLine($"Upload {localFile} to {s3Bucket} bucket");
            var putRequest = new PutObjectRequest
                {
                    BucketName = s3Bucket,
                    FilePath = localFile,
                    Key = Path.GetFileName(localFile)
                };
            await s3Client.PutObjectAsync(putRequest);

            Console.WriteLine("Start document detection job");
            var startResponse = await textractClient.StartDocumentTextDetectionAsync(new StartDocumentTextDetectionRequest
                {
                    DocumentLocation = new DocumentLocation
                    {
                        S3Object = new Amazon.Textract.Model.S3Object
                        {
                            Bucket = s3Bucket,
                            Name = putRequest.Key
                        }
                    }
                });

            Console.WriteLine($"Job ID: {startResponse.JobId}");

            var getDetectionRequest = new GetDocumentTextDetectionRequest
                {
                    JobId = startResponse.JobId
                };

            Console.WriteLine("Poll for detect job to complete");
            // Poll till job is no longer in progress.
            GetDocumentTextDetectionResponse getDetectionResponse = null;
            do
            {
                Thread.Sleep(1000);
                getDetectionResponse = await textractClient.GetDocumentTextDetectionAsync(getDetectionRequest);
            } while (getDetectionResponse.JobStatus == JobStatus.IN_PROGRESS);

            Console.WriteLine("Print out results if the job was successful.");
            // If the job was successful loop through the pages of results and print the detected text
            if (getDetectionResponse.JobStatus == JobStatus.SUCCEEDED)
            {
                do
                {
                    foreach (var block in getDetectionResponse.Blocks)
                    {
                        Console.WriteLine($"Type {block.BlockType}, Text: {block.Text}");
                    }

                    // Check to see if there are no more pages of data. If no then break.
                    if (string.IsNullOrEmpty(getDetectionResponse.NextToken))
                    {
                        break;
                    }

                    getDetectionRequest.NextToken = getDetectionResponse.NextToken;
                    getDetectionResponse = await textractClient.GetDocumentTextDetectionAsync(getDetectionRequest);

                } while (!string.IsNullOrEmpty(getDetectionResponse.NextToken));
            }
            else
            {
                Console.WriteLine($"Job failed with message: {getDetectionResponse.StatusMessage}");
            }
        }
    }
}